{"version":3,"sources":["webpack:///./src/components/intro.js","webpack:///./src/components/blog-list.js","webpack:///./src/components/writings.js","webpack:///./src/components/projects.js","webpack:///./src/pages/index.js"],"names":["SocialLinks","socialLinks","map","socialLink","index","icon","faGithub","faLinkedin","faEnvelope","Fragment","key","name","length","sx","variant","href","url","target","rel","Intro","social","useStaticQuery","socialLinkQuery","site","siteMetadata","BlogList","allBlogPost","BlogListQuery","to","ul","edges","node","id","mb","dateTime","formatTime","date","mr","color","themeColor","hoverThemeColor","slug","title","Writing","linkText","Writings","writingsQuery","writings","writing","ProjectItem","desc","display","Projects","projectsQuery","projects","project","IndexPage"],"mappings":"2OAWA,SAASA,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,YAErB,OACE,8BAEIA,EAAYC,KAAI,SAACC,EAAYC,GAC3B,IAAIC,EAEJ,OAAQF,EAAWE,MACjB,IAAK,SACHA,EAAOC,IACP,MACF,IAAK,WACHD,EAAOE,IACP,MACF,IAAK,WACHF,EAAOG,IAKX,OACE,YAAC,IAAMC,SAAP,CACEC,IAAKP,EAAWQ,MAEfP,IAAUH,EAAYW,OAAS,EAAI,SAAW,GAC/C,iBACEC,GAAI,CAAEC,QAAS,gBACfC,KAAMZ,EAAWa,IACjBC,OAAO,SACPC,IAAI,uBAEJ,YAAC,IAAD,CAAiBb,KAAMA,KAExBD,GAAS,GAAMA,IAAUH,EAAYW,OAAS,GAAOR,IAAUH,EAAYW,OAAS,EAAK,KAAO,QAShG,SAASO,IAAS,IAGXC,EAEhBC,YAAeC,GAHjBC,KACEC,aAAgBJ,OAIpB,OACE,2BACE,iFAGA,oCACe,IACb,YAACpB,EAAD,CACEC,YAAamB,MAOvB,IAAME,EAAe,a,wBCrEN,SAASG,IAAY,IAC1BC,EAAgBL,YAAeM,GAA/BD,YAER,OACE,2BACE,YAAC,IAAD,CAAME,GAAG,aAAaf,GAAI,CAAEC,QAAQ,oBAClC,kBAAID,GAAI,CAAEC,QAAQ,UAAlB,UAEF,YAAC,IAAOe,GAAR,KACGH,EAAYI,MAAM5B,KAAI,YAAe,IAAZ6B,EAAW,EAAXA,KACxB,OACE,kBAAIrB,IAAKqB,EAAKC,GAAInB,GAAI,CAAEoB,GAAI,IAC1B,oBACEC,SAAUC,YAAWJ,EAAKK,MAC1BvB,GAAI,CAAEwB,GAAI,EAAGC,MAAM,aAElB,IACAP,EAAKK,MAER,YAAC,IAAD,CAAWG,WAAW,OAAOC,gBAAgB,aAC3C,YAAC,IAAD,CAAMZ,GAAE,GAAKG,EAAKU,KAAQ5B,GAAI,CAAEC,QAAQ,oBACrCiB,EAAKW,cAWxB,IAAMf,EAAa,aClCnB,SAASgB,EAAT,GAA4C,IAAzB5B,EAAwB,EAAxBA,KAAM6B,EAAkB,EAAlBA,SAAUR,EAAQ,EAARA,KACjC,OACE,kBAAIvB,GAAI,CAAEoB,GAAI,IACZ,oBACEpB,GAAI,CAAEwB,GAAI,EAAGC,MAAM,aAElB,IACAF,GAEH,YAAC,IAAD,CAAWG,WAAW,OAAOC,gBAAgB,aAC3C,iBACEzB,KAAMA,EACNE,OAAO,SACPC,IAAI,sBACJL,GAAI,CAAEC,QAAQ,oBAEb8B,KAOI,SAASC,IAAY,IAAD,EAK7BxB,YAAeyB,GAHjBvB,KACEC,aAAgBuB,gBAHa,MAGF,GAHE,EAOjC,OACE,2BACE,wBACE,kBAAIlC,GAAI,CAAEC,QAAS,UAAnB,aAEF,YAAC,IAAOe,GAAR,KAEIkB,EAAS7C,KAAI,SAAA8C,GAAO,OAAI,YAACL,EAAD,CACtBjC,IAAKsC,EAAQrC,KACbI,KAAMiC,EAAQhC,IACd4B,SAAUI,EAAQrC,KAClByB,KAAMY,EAAQZ,YAS1B,IAAMU,EAAa,aClDnB,SAASG,EAAT,GAAgD,IAAzBlC,EAAwB,EAAxBA,KAAM6B,EAAkB,EAAlBA,SAAUM,EAAQ,EAARA,KACrC,OACE,kBAAIrC,GAAI,CAAEoB,GAAI,IACZ,YAAC,IAAD,CAAWM,WAAW,OAAOC,gBAAgB,aAC3C,iBACEzB,KAAMA,EACNE,OAAO,SACPC,IAAI,sBACJL,GAAI,CAAEC,QAAQ,oBAEb8B,IARP,KAWI,iBAAG/B,GAAI,CAAEsC,QAAQ,WAAcD,IAKxB,SAASE,IAAY,IAAD,EAK7B/B,YAAegC,GAHjB9B,KACEC,aAAgB8B,gBAHa,MAGF,GAHE,EAOjC,OACE,2BACE,wBACE,kBAAIzC,GAAI,CAAEC,QAAS,UAAnB,aAEF,YAAC,IAAOe,GAAR,KAEIyB,EAASpD,KAAI,SAAAqD,GAAO,OAAI,YAACN,EAAD,CACtBvC,IAAK6C,EAAQ5C,KACbI,KAAMwC,EAAQvC,IACd4B,SAAUW,EAAQ5C,KAClBuC,KAAMK,EAAQL,YAS1B,IAAMG,EAAa,aCvCJ,SAASG,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKd,MAAM,SACX,kBAACvB,EAAD,MACA,kBAACM,EAAD,MACA,kBAACoB,EAAD,MACA,kBAACO,EAAD","file":"component---src-pages-index-js-057b7aa74be318724aad.js","sourcesContent":["/** @jsx jsx */\nimport React from \"react\";\nimport { jsx } from \"theme-ui\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  faGithub,\n  faLinkedin,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nfunction SocialLinks({ socialLinks }) {\n\n  return (\n    <>\n      {\n        socialLinks.map((socialLink, index) => {\n          let icon;\n          \n          switch (socialLink.icon) {\n            case 'github':\n              icon = faGithub;\n              break;\n            case 'linkedin':\n              icon = faLinkedin;\n              break;\n            case 'envelope':\n              icon = faEnvelope;\n              break;\n            default:\n          }\n\n          return (\n            <React.Fragment\n              key={socialLink.name}\n            >\n              {index === socialLinks.length - 1 ? ', and ' : ''}\n              <a\n                sx={{ variant: 'links.social' }}\n                href={socialLink.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <FontAwesomeIcon icon={icon} />\n              </a>\n              {index >= 0 && (index !== socialLinks.length - 1) && (index !== socialLinks.length - 2) ? ', ' : ''}\n            </React.Fragment>\n          )\n        })\n      }\n    </>\n  );\n}\n\nexport default function Intro() {\n  const {\n    site: {\n      siteMetadata: { social },\n    },\n  } = useStaticQuery(socialLinkQuery);\n\n  return (\n    <section>\n      <p>\n        Hi, I am a Web Architect for The Weather Company at IBM.\n      </p>\n      <p>\n        Reach out on{' '}\n        <SocialLinks\n          socialLinks={social}\n        />\n      </p>\n    </section>\n  );\n}\n\nconst socialLinkQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        social {\n          name\n          url\n          icon\n        }\n      }\n    }\n  }\n`;\n","/** @jsx jsx */\nimport { jsx, Styled } from \"theme-ui\";\nimport { graphql, useStaticQuery, Link } from \"gatsby\";\n\nimport { Underline } from \"@roastlechon/gatsby-theme-succulent/src/components\";\nimport formatTime from \"@roastlechon/gatsby-theme-succulent/utils/format-time\";\n\nexport default function BlogList() {\n  const { allBlogPost } = useStaticQuery(BlogListQuery);\n\n  return (\n    <section>\n      <Link to=\"/archives/\" sx={{ variant: `links.secondary` }}>\n        <h2 sx={{ variant: `title` }}>Posts</h2>\n      </Link>\n      <Styled.ul>\n        {allBlogPost.edges.map(({ node }) => {\n          return (\n            <li key={node.id} sx={{ mb: 2 }}>\n              <time\n                dateTime={formatTime(node.date)}\n                sx={{ mr: 3, color: `tertiary` }}\n              >\n                {\" \"}\n                {node.date}\n              </time>\n              <Underline themeColor=\"text\" hoverThemeColor=\"secondary\">\n                <Link to={`${node.slug}`} sx={{ variant: `links.underline` }}>\n                  {node.title}\n                </Link>\n              </Underline>\n            </li>\n          );\n        })}\n      </Styled.ul>\n    </section>\n  );\n}\n\nconst BlogListQuery = graphql`\n  query {\n    allBlogPost(sort: { fields: [date, title], order: DESC }, limit: 50) {\n      edges {\n        node {\n          id\n          excerpt\n          slug\n          title\n          date(formatString: \"DD MMM YYYY\")\n          tags\n        }\n      }\n    }\n  }\n`;\n","/** @jsx jsx */\nimport { jsx, Styled } from \"theme-ui\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { Underline } from \"@roastlechon/gatsby-theme-succulent/src/components\";\n\nfunction Writing({ href, linkText, date }) {\n  return (\n    <li sx={{ mb: 2 }}>\n      <time\n        sx={{ mr: 3, color: `tertiary` }}\n      >\n        {\" \"}\n        {date}\n      </time>\n      <Underline themeColor=\"text\" hoverThemeColor=\"secondary\">\n        <a\n          href={href}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          sx={{ variant: `links.underline` }}\n        >\n          {linkText}\n        </a>\n      </Underline>\n    </li>\n  );\n}\n\nexport default function Writings() {\n  const {\n    site: {\n      siteMetadata: { writings = [] },\n    },\n  } = useStaticQuery(writingsQuery);\n\n  return (\n    <section>\n      <span>\n        <h2 sx={{ variant: 'title' }}>Writings</h2>\n      </span>\n      <Styled.ul>\n        {\n          writings.map(writing => <Writing\n            key={writing.name}\n            href={writing.url}\n            linkText={writing.name}\n            date={writing.date}\n          />)\n        }\n      </Styled.ul>\n    </section>\n  );\n}\n\n\nconst writingsQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        writings {\n          name\n          url\n          date\n        }\n      }\n    }\n  }\n`;\n","/** @jsx jsx */\nimport { jsx, Styled } from \"theme-ui\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { Underline } from \"@roastlechon/gatsby-theme-succulent/src/components\";\n\nfunction ProjectItem({ href, linkText, desc }) {\n  return (\n    <li sx={{ mb: 2 }}>\n      <Underline themeColor=\"text\" hoverThemeColor=\"secondary\">\n        <a\n          href={href}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          sx={{ variant: `links.underline` }}\n        >\n          {linkText}\n        </a>\n      </Underline>\n      : <p sx={{ display: `inline` }}>{desc}</p>\n    </li>\n  );\n}\n\nexport default function Projects() {\n  const {\n    site: {\n      siteMetadata: { projects = [] },\n    },\n  } = useStaticQuery(projectsQuery);\n\n  return (\n    <section>\n      <span>\n        <h2 sx={{ variant: 'title' }}>Projects</h2>\n      </span>\n      <Styled.ul>\n        {\n          projects.map(project => <ProjectItem\n            key={project.name}\n            href={project.url}\n            linkText={project.name}\n            desc={project.desc}\n          />)\n        }\n      </Styled.ul>\n    </section>\n  );\n}\n\n\nconst projectsQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        projects {\n          name\n          url\n          desc\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\n\nimport {\n  SEO,\n  Layout,\n} from \"@roastlechon/gatsby-theme-succulent/src/components\";\nimport Intro from \"../components/intro\";\nimport BlogList from \"../components/blog-list\";\nimport Writings from \"../components/writings\";\nimport Projects from \"../components/projects\";\n\nexport default function IndexPage() {\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Intro />\n      <BlogList />\n      <Writings />\n      <Projects />\n    </Layout>\n  );\n}\n"],"sourceRoot":""}